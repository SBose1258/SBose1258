# -*- coding: utf-8 -*-
"""Visualisations_using_openai.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PlYUUKILkCcv_fR0CLTGx_M29Rkycr5G

## Install libraries
"""

!pip install openai==0.28
import pandas as pd
import openai
import re
import os
from google.colab import files
from google.colab import userdata

"""## Import libraries"""

os.environ['OPENAI_API_KEY']='YOUR OPEN AI KEY'

"""## Load CSV file"""

# Google Colab Interface
print("Please upload your CSV file")
uploaded = files.upload()

# Load the uploaded CSV file
for filename in uploaded.keys():
    df = pd.read_csv(filename)
    print("\nUploaded Data Preview:\n")
    print(df.head())

"""## Process CSV file"""

for col in df.columns:
    if 'date' in col.lower():
        df[col] = pd.to_datetime(df[col])#date formats

df = df.reset_index(drop=True)#reset index
df.columns = df.columns.str.replace(' ', '_')#replace spaces in the columns
cols = df.columns
cols = ", ".join(cols)

"""## Post Processing GPT response"""

def clean_the_response(response):
    if "```" in response:
        pattern = r'```(.*?)```'
        code = re.search(pattern, response, re.DOTALL)
        extracted_code = code.group(1)
        extracted_code = extracted_code.replace('python', '')
        return extracted_code
    else:
        return response

"""## Construct the Prompt"""

def create_plot(user_input, cols):
    prompt = (
        f"Write code in Python using Plotly to address the following request: {user_input}. "
        f"Use df that has the following columns: {cols}. "
        "Do not use the animation_group argument and return "
        "only code with no import statements, assuming the data "
        "has been already loaded in a df variable."
    )

    # Load API key from environment
    openai.api_key = os.environ["OPENAI_API_KEY"]

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        max_tokens=1500,
        temperature=0,
        messages=[
            {"role": "user", "content": prompt},
        ]
    )

    response = completion['choices'][0]['message']['content'].strip()
    extracted_code = clean_the_response(response)

    # Execute the generated code
    try:
        exec(extracted_code)
    except Exception as e:
        print(f"Error executing the generated code: {e}")

"""## Executing the Chatbot"""

#User_query = "plot a bar chart for bmi values and age" #@param {type:"string"}
#User_query = input("Enter your query about the dataset: ")
#create_plot(User_query,cols)

print("Welcome to the dataset visualization chatbot! Type 'exit' to quit.")
while True:
    User_query = input("Enter your query about the dataset: ")
    if User_query.lower() in ["bye", "tata", "exit"]:
        print("Goodbye!")
        break
    create_plot(User_query, cols)